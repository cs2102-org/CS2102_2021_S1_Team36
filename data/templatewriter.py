def firstHalf(filename, mode):
    with open(filename, mode) as f:
        f.write("DROP DATABASE IF EXISTS pcs;\n")
        f.write("\n")
        f.write("CREATE DATABASE pcs;\n")
        f.write("\n")
        f.write("\c pcs;\n")
        f.write("\n")
        f.write("DROP TABLE IF EXISTS Users CASCADE;\n")
        f.write("DROP TABLE IF EXISTS CareTakers CASCADE;\n")
        f.write("DROP TABLE IF EXISTS PetOwners CASCADE;\n")
        f.write("DROP TABLE IF EXISTS Pets CASCADE;\n")
        f.write("DROP TABLE IF EXISTS PcsAdmins CASCADE;\n")
        f.write("DROP TABLE IF EXISTS BidsFor CASCADE;\n")
        f.write("DROP TABLE IF EXISTS TakecarePrice CASCADE;\n")
        f.write("DROP TABLE IF EXISTS PetTypes CASCADE;\n")
        f.write("DROP TABLE IF EXISTS Posts CASCADE;\n")
        f.write("DROP TABLE IF EXISTS Comments CASCADE;\n")
        f.write("DROP TABLE IF EXISTS PartTimeAvail CASCADE;\n")
        f.write("DROP TABLE IF EXISTS FullTimeLeave CASCADE;\n")
        f.write("\n")
        f.write("DROP TYPE IF EXISTS transfer_type;\n")
        f.write("DROP TYPE IF EXISTS payment_type;\n")
        f.write("CREATE TYPE transfer_type AS ENUM('1', '2', '3');\n")
        f.write("CREATE TYPE payment_type AS ENUM('1', '2', '3');\n")
        f.write("\n")
        f.write("CREATE TABLE Users (\n")
        f.write("    name VARCHAR(30) NOT NULL,\n")
        f.write("    email VARCHAR(30) PRIMARY KEY,\n")
        f.write("    description VARCHAR(255),\n")
        f.write("    password VARCHAR(60) NOT NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE Caretakers (\n")
        f.write("    email VARCHAR(30) PRIMARY KEY REFERENCES Users(email) ON DELETE CASCADE,\n")
        f.write("    is_fulltime BOOLEAN NOT NULL,\n")
        f.write("    rating DECIMAL(10, 2),\n")
        f.write("    CHECK (0 <= rating AND rating <= 5)\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE PartTimeAvail ( -- records the part time availability\n")
        f.write("    email VARCHAR(30) REFERENCES Caretakers(email) ON DELETE CASCADE,\n")
        f.write("    work_date DATE,\n")
        f.write("    PRIMARY KEY (email, work_date)\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE FullTimeLeave ( -- records the full time availability\n")
        f.write("    email VARCHAR(30) REFERENCES Caretakers(email) ON DELETE CASCADE,\n")
        f.write("    leave_date DATE NOT NULL,\n")
        f.write("    PRIMARY KEY (email, leave_date)\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE PetOwners (\n")
        f.write("    email VARCHAR(30) PRIMARY KEY REFERENCES Users(email) ON DELETE CASCADE\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE PetTypes ( -- enumerates the types of pets there are, like Dog, Cat, etc\n")
        f.write("    species VARCHAR(30) PRIMARY KEY NOT NULL,\n")
        f.write("    base_price DECIMAL(10,2) not null\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE Pets (\n")
        f.write("    email VARCHAR(30) REFERENCES PetOwners(email) ON DELETE CASCADE,\n")
        f.write("    pet_name VARCHAR(30),\n")
        f.write("    special_requirements VARCHAR(255),\n")
        f.write("    description VARCHAR(255),\n")
        f.write("    species VARCHAR(30) REFERENCES PetTypes(species) ON DELETE CASCADE,\n")
        f.write("    PRIMARY KEY (pet_name, email)\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE PcsAdmins (\n")
        f.write("    email VARCHAR(30) PRIMARY KEY REFERENCES Users(email) ON DELETE CASCADE\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE BidsFor (\n")
        f.write("    owner_email VARCHAR(30),\n")
        f.write("    caretaker_email VARCHAR(30) REFERENCES CareTakers(email) ON DELETE CASCADE,\n")
        f.write("    pet_name VARCHAR(30),\n")
        f.write("    submission_time TIMESTAMP,\n")
        f.write("    start_date DATE,\n")
        f.write("    end_date DATE,\n")
        f.write("    price DECIMAL(10,2),\n")
        f.write("    amount_bidded DECIMAL(10,2),\n")
        f.write("    is_confirmed BOOLEAN DEFAULT NULL,\n")
        f.write("    is_paid BOOLEAN DEFAULT False,\n")
        f.write("    payment_type payment_type,\n")
        f.write("    transfer_type transfer_type,\n")
        f.write("    rating DECIMAL(10, 1) DEFAULT NULL CHECK (rating ISNULL or (rating >= 0 AND rating <= 5)), \n")
        f.write("    review VARCHAR(255) DEFAULT NULL, --can add text for the review\n")
        f.write("    PRIMARY KEY (caretaker_email, owner_email, pet_name, submission_time),\n")
        f.write("    CONSTRAINT bidsfor_dates_check CHECK (submission_time < start_date AND start_date <= end_date),\n")
        f.write("    CONSTRAINT bidsfor_price_le_bid_amount CHECK (price <= amount_bidded),\n")
        f.write("    CONSTRAINT bidsfor_confirm_before_paid CHECK (NOT is_paid OR is_confirmed) -- check that is_paid implies confirmed\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE TakecarePrice (\n")
        f.write("    daily_price DECIMAL(10,2),\n")
        f.write("    email varchar(30) REFERENCES Caretakers(email) ON DELETE cascade, -- references the caretaker\n")
        f.write("    species varchar(30) REFERENCES PetTypes(species) ON DELETE cascade,\n")
        f.write("    PRIMARY KEY (email, species)  --- daily price > base price\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE Posts (\n")
        f.write("	post_id SERIAL PRIMARY KEY,\n")
        f.write("    email VARCHAR(30) REFERENCES Users(email) ON DELETE SET NULL,\n")
        f.write("    title VARCHAR(255),\n")
        f.write("    cont TEXT,\n")
        f.write("    last_modified TIMESTAMP DEFAULT NOW()\n")
        f.write(");\n")
        f.write("\n")
        f.write("CREATE TABLE Comments (\n")
        f.write("	post_id INTEGER REFERENCES Posts(post_id) ON DELETE CASCADE,\n")
        f.write("    email VARCHAR(30) REFERENCES Users(email) ON DELETE CASCADE,\n")
        f.write("    date_time TIMESTAMP DEFAULT NOW(),\n")
        f.write("    cont TEXT,\n")
        f.write("    PRIMARY KEY (post_id, email, date_time)\n")
        f.write(");\n")
        f.write("\n")
        f.write("-- ============================================ HELPER FUNCTIONS =============================================================\n")
        f.write("\n")
        f.write("-- return true if interval [s1, e1] overlaps with [s2, e2]\n")
        f.write("CREATE OR REPLACE FUNCTION clash(s1 date, e1 date, d date)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return ((s1, e1 + interval '1 day') overlaps (d, d + interval '1 day'));\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return true if interval [s1, e1] overlaps with [s2, e2]\n")
        f.write("CREATE OR REPLACE FUNCTION clash(s1 date, e1 date, s2 date, e2 date)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return ((s1, e1 + interval '1 day') overlaps (s2, e2 + interval '1 day'));\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return true if cemail is fulltimecaretaker, else false\n")
        f.write("CREATE OR REPLACE FUNCTION isFullTime(cemail varchar)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return (select is_fulltime from Caretakers CT where CT.email = cemail);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return the max number of pets this caretaker can take care of\n")
        f.write("CREATE OR REPLACE FUNCTION getPetLimit(cemail varchar)\n")
        f.write("RETURNS int\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF (NOT EXISTS (select 1 from caretakers where email = cemail)) THEN\n")
        f.write("		return 0;\n")
        f.write("	ELSIF (select is_fulltime from caretakers where email = cemail) THEN\n")
        f.write("		return 5;\n")
        f.write("	ELSIF (select rating from caretakers where email = cemail) >= 4 THEN\n")
        f.write("		return 5;\n")
        f.write("	ELSE\n")
        f.write("		return 2;\n")
        f.write("	END IF;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return the workload of this caretaker on the interval\n")
        f.write("-- workload is a table of pairs (work_date, num_jobs)\n")
        f.write("drop function if exists getWorkload;\n")
        f.write("CREATE OR REPLACE FUNCTION getWorkload(cemail varchar, s date, e date)\n")
        f.write("RETURNS table (work_date date, num_jobs int)\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return query select D.work_date, (\n")
        f.write("		select COUNT(*)::int from bidsFor\n")
        f.write("		where\n")
        f.write("			caretaker_email = cemail and \n")
        f.write("			is_confirmed = True and\n")
        f.write("			clash(start_date, end_date, D.work_date, D.work_date)\n")
        f.write("	) as num_jobs\n")
        f.write("	from (select generate_series(s, e, '1 day'::interval)::date as work_date) as D;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return true if caretaker has capacity to take on 1 more pet on the given interval\n")
        f.write("drop function if exists hasSpareCapacity;\n")
        f.write("CREATE OR REPLACE FUNCTION hasSpareCapacity(cemail varchar, s date, e date)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return getPetLimit(cemail) > ALL (select num_jobs from getWorkload(cemail, s, e));\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- return true if caretaker is available (not on leave if fulltime, and is on work if parttime) on the given interval\n")
        f.write("drop function if exists isAvail;\n")
        f.write("CREATE OR REPLACE FUNCTION isAvail(cemail varchar, s date, e date)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF (select is_fulltime from caretakers where email = cemail) THEN\n")
        f.write("		return not exists (\n")
        f.write("			select * from FullTimeLeave\n")
        f.write("			where\n")
        f.write("				email = cemail and\n")
        f.write("				clash(s, e, leave_date)\n")
        f.write("		);\n")
        f.write("	ELSE\n")
        f.write("		return not exists (\n")
        f.write("			SELECT generate_series(s::date, e::date, '1 day'::interval)::date as datez\n")
        f.write("			EXCEPT (select work_date as datez from parttimeavail where email = cemail)\n")
        f.write("		);\n")
        f.write("	END IF;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("drop function if exists canWork;\n")
        f.write("CREATE OR REPLACE FUNCTION canWork(cemail varchar, s date, e date)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return isAvail(cemail, s, e) AND hasSpareCapacity(cemail, s, e);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- returns whether oemail likes cemail\n")
        f.write("-- O likes C if O's average rating of C is >= 4\n")
        f.write("CREATE OR REPLACE FUNCTION likes(oemail varchar, cemail varchar)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return (select avg(rating) from bidsfor BF\n")
        f.write("		where\n")
        f.write("			BF.owner_email = oemail and\n")
        f.write("			BF.caretaker_email = cemail and\n")
        f.write("			rating is not null\n")
        f.write("		) >= 4;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- returns whether owners likes at least 3 caretakers in common\n")
        f.write("CREATE OR REPLACE FUNCTION isSimilar(oemail1 varchar, oemail2 varchar)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	return (select COUNT(*) from \n")
        f.write("		(\n")
        f.write("        select * from Caretakers where likes(oemail1, email)\n")
        f.write("		INTERSECT\n")
        f.write("		select * from Caretakers where likes(oemail2, email)\n")
        f.write("		) AS Common\n")
        f.write("	) >= 3;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- returns the number of blocks of length at least 150\n")
        f.write("CREATE OR REPLACE FUNCTION isLeaveValid(cemail varchar, yr int)\n")
        f.write("RETURNS boolean\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("DECLARE\n")
        f.write("	fd date;\n")
        f.write("	ld date;\n")
        f.write("	cemail_min date;\n")
        f.write("	cemail_max date;\n")
        f.write("	cemail_x bigint;\n")
        f.write("BEGIN\n")
        f.write("	select into fd (yr || '-01-01')::date;\n")
        f.write("	select into ld (yr || '-12-31')::date;\n")
        f.write("	\n")
        f.write("	IF (\n")
        f.write("		select COUNT(*) from fulltimeleave where\n")
        f.write("			email = cemail and\n")
        f.write("			fd <= leave_date and\n")
        f.write("			leave_date <= ld\n")
        f.write("		) <= 1 THEN\n")
        f.write("		RETURN True;\n")
        f.write("	END IF;\n")
        f.write("	\n")
        f.write("	select into cemail_min MIN(leave_date) from fulltimeleave where\n")
        f.write("		email = cemail and\n")
        f.write("		fd <= leave_date and\n")
        f.write("		leave_date <= ld;\n")
        f.write("	select into cemail_max MAX(leave_date) from fulltimeleave where\n")
        f.write("		email = cemail and\n")
        f.write("		fd <= leave_date and\n")
        f.write("		leave_date <= ld;\n")
        f.write("		\n")
        f.write("	select SUM(len / 150) into cemail_x from (\n")
        f.write("		select (lead(leave_date, 1) over (order by leave_date asc) - leave_date) as len\n")
        f.write("		from (\n")
        f.write("		SELECT \n")
        f.write("			email, \n")
        f.write("			leave_date\n")
        f.write("		FROM fulltimeleave where\n")
        f.write("			email = cemail and\n")
        f.write("			fd <= leave_date and\n")
        f.write("			leave_date <= ld\n")
        f.write("		ORDER BY leave_date asc\n")
        f.write("		) L1\n")
        f.write("	) L2;\n")
        f.write("		\n")
        f.write("   	cemail_x := cemail_x + (cemail_min - fd) / 150;\n")
        f.write("	cemail_x := cemail_x + (ld - cemail_max) / 150;\n")
        f.write("	\n")
        f.write("	return cemail_x >= 2;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("\n")
        f.write("-- void function. Creates a new user and pcsadmin in a single transaction.\n")
        f.write("drop function if exists createPcsAdmin;\n")
        f.write("CREATE OR REPLACE FUNCTION createPcsAdmin(email varchar, username varchar)\n")
        f.write("RETURNS void\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    insert into users values (username, email, 'Your bio is blank. Tell the world about yourself!', 'password1');\n")
        f.write("    insert into pcsadmins values (email);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- void function. Creates a new user and fulltime caretaker in a single transaction.\n")
        f.write("drop function if exists createFtCaretaker;\n")
        f.write("CREATE OR REPLACE FUNCTION createFtCaretaker(email varchar, username varchar)\n")
        f.write("RETURNS void\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    insert into users values (username, email, 'Your bio is blank. Tell the world about yourself!', 'password1');\n")
        f.write("    insert into caretakers (email, is_fulltime) values (email, true);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- void function. Creates a new user and part time caretaker in a single transaction.\n")
        f.write("drop function if exists createPtCaretaker;\n")
        f.write("CREATE OR REPLACE FUNCTION createPtCaretaker(email varchar, username varchar, descript varchar, pass varchar)\n")
        f.write("RETURNS void\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    insert into users values (username, email, descript, pass);\n")
        f.write("    insert into caretakers (email, is_fulltime) values (email, false);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- void function. Creates a new user and petowner in a single transaction.\n")
        f.write("drop function if exists createPetOwner;\n")
        f.write("CREATE OR REPLACE FUNCTION createPetOwner(email varchar, username varchar, descript varchar, pass varchar)\n")
        f.write("RETURNS void\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    insert into users values (username, email, descript, pass);\n")
        f.write("    insert into petowners (email) values (email);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- void function. Creates a new user, petowner and part time caretaker in a single transaction.\n")
        f.write("drop function if exists createPtAndPo;\n")
        f.write("CREATE OR REPLACE FUNCTION createPtAndPo (email varchar, username varchar, descript varchar, pass varchar)\n")
        f.write("RETURNS void\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    insert into users values (username, email, descript, pass);\n")
        f.write("    insert into petowners (email) values (email);\n")
        f.write("    insert into caretakers (email, is_fulltime) values (email, false);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- getPetDays(email, start, end) -> int :: total pet days worked\n")
        f.write("-- returns NULL if email hasn't completed any jobs that month (have to check division by NULL)\n")
        f.write("drop function if exists getPetDays;\n")
        f.write("CREATE OR REPLACE FUNCTION getPetDays(cemail varchar, s date, e date)\n")
        f.write("RETURNS int\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("declare \n")
        f.write("	daysWorked INTEGER;\n")
        f.write("BEGIN\n")
        f.write("	select sum(end_date - start_date + 1) into daysWorked\n")
        f.write("	from bidsfor\n")
        f.write("	where caretaker_email=cemail\n")
        f.write("		and (s <= end_date and end_date <= e)\n")
        f.write("		and is_paid\n")
        f.write("        and is_confirmed\n")
        f.write("	group by cemail;\n")
        f.write("	\n")
        f.write("	return daysWorked;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- getTotalRevenue(email, start, end) -> float :: total revenue\n")
        f.write("-- returns NULL if email hasn't completed any jobs that month hence earned no revenue \n")
        f.write("-- take note of this when doing arithmetic with this result\n")
        f.write("drop function if exists getTotalRevenue;\n")
        f.write("CREATE OR REPLACE FUNCTION getTotalRevenue(cemail varchar, s date, e date)\n")
        f.write("RETURNS FLOAT\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("declare \n")
        f.write("	revenue FLOAT;\n")
        f.write("BEGIN\n")
        f.write("	select sum((end_date - start_date + 1) * amount_bidded) into revenue\n")
        f.write("	from bidsfor \n")
        f.write("	where is_paid \n")
        f.write("        and is_confirmed\n")
        f.write("		and (s <= end_date and end_date <= e)\n")
        f.write("		and caretaker_email=cemail\n")
        f.write("	group by cemail;\n")
        f.write("	\n")
        f.write("	return revenue;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- getSalary(email, start, end) -> float\n")
        f.write("-- gets salary to be paid to a caretaker for jobs COMPLETED during \n")
        f.write("-- [start, end] inclusive\n")
        f.write("-- e.g.: if job starts Jan 30, ends Feb 5, he will only be paid for the entire job \n")
        f.write("-- in Feb\n")
        f.write("drop function if exists getSalary;\n")
        f.write("CREATE OR REPLACE FUNCTION getSalary(cemail varchar, s date, e date)\n")
        f.write("RETURNS float\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("declare\n")
        f.write("    -- these vars are null, caretaker didn't complete any jobs during period\n")
        f.write("    totalRev FLOAT := getTotalRevenue(cemail, s, e);\n")
        f.write("    daysWorked INT := getPetDays(cemail, s, e);\n")
        f.write("	avgPricePerDay FLOAT := totalRev / daysWorked;\n")
        f.write("	is_ft BOOLEAN;\n")
        f.write("BEGIN	\n")
        f.write("	select is_fulltime into is_ft\n")
        f.write("	from caretakers\n")
        f.write("	where email=cemail;\n")
        f.write("	\n")
        f.write("    if daysWorked is null then\n")
        f.write("        daysWorked := 0;\n")
        f.write("    end if;\n")
        f.write("	\n")
        f.write("    if totalRev is null then\n")
        f.write("        totalRev := 0;\n")
        f.write("    end if;\n")
        f.write("\n")
        f.write("	if is_ft and daysWorked <= 60 then\n")
        f.write("        -- less than 60 pet days worked\n")
        f.write("		return 3000;\n")
        f.write("	elsif is_ft and daysWorked > 60 then\n")
        f.write("		return 3000 + ((daysWorked - 60) * avgPricePerDay);\n")
        f.write("	else -- is parttime\n")
        f.write("		return 0.75 * totalRev;\n")
        f.write("	end if;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- getWorkDays(email, start, end) -> int :: total working days worked\n")
        f.write("-- returns 0 if email hasn't completed any jobs that month\n")
        f.write("drop function if exists getWorkDays;\n")
        f.write("CREATE OR REPLACE FUNCTION getWorkDays(cemail varchar, s date, e date)\n")
        f.write("RETURNS int\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("declare \n")
        f.write("	daysWorked INTEGER;\n")
        f.write("BEGIN\n")
        f.write("	select count(*) into daysWorked\n")
        f.write("	from generate_series (s::timestamp, e::timestamp, '1 day'::interval) dd \n")
        f.write("	where exists (select 1 \n")
        f.write("                  from bidsFor B\n")
        f.write("                  where clash(B.start_date, B.end_date, date_trunc('day', dd)::date)\n")
        f.write("                    and B.is_confirmed\n")
        f.write("                    and B.is_paid\n")
        f.write("                    and B.caretaker_email=cemail);\n")
        f.write("	\n")
        f.write("	return daysWorked;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- compute the daily price for this caretaker and this pet type\n")
        f.write("-- if caretaker is full time, then returns base_price * 5 * rating (base_price depends on pet type)\n")
        f.write("-- if caretaker is part time, returns the price specified in Takecareprice if exists, else return null\n")
        f.write("CREATE OR REPLACE FUNCTION getDailyPrice(cemail varchar, spec varchar)\n")
        f.write("RETURNS DECIMAL(10, 2)\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("DECLARE\n")
        f.write("	r DECIMAL(10, 2);  -- rating\n")
        f.write("	bp DECIMAL(10, 2); -- base price\n")
        f.write("BEGIN\n")
        f.write("	select rating into r from Caretakers CT where CT.email = cemail;\n")
        f.write("	select base_price into bp from PetTypes PT where PT.species = spec;\n")
        f.write("	if isFullTime(cemail) then\n")
        f.write("		if r is null then\n")
        f.write("			return bp;\n")
        f.write("		else\n")
        f.write("			return bp + 5 * r;\n")
        f.write("		end if;\n")
        f.write("	else\n")
        f.write("		return (\n")
        f.write("			select daily_price from Takecareprice TCP\n")
        f.write("			where\n")
        f.write("				TCP.email = cemail and\n")
        f.write("				TCP.species = spec\n")
        f.write("			);\n")
        f.write("	end if;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- function to see which bids satisfy a set of criteria (i.e. a filter on bids)\n")
        f.write("DROP FUNCTION IF EXISTS filterBids;\n")
        f.write("CREATE OR REPLACE FUNCTION filterBids(\n")
        f.write("	p_po_name varchar, -- bids with this substr in petowner name\n")
        f.write("	p_ct_name varchar, -- bids with this substr in caretaker name\n")
        f.write("	p_is_fulltime boolean, -- bids with this type of caretaker\n")
        f.write("	p_pet_type varchar, -- bids with this pet type\n")
        f.write("	p_start_date date, -- bids with start_date after this\n")
        f.write("	p_end_date date, -- bids with end_date before this\n")
        f.write("	p_min DECIMAL(10, 2), -- bids with amount_bidded more than this\n")
        f.write("	p_max DECIMAL(10, 2), -- bids with amount_bidded less than this\n")
        f.write("	p_rating DECIMAL(10, 2), -- bids with rating more than this\n")
        f.write("	p_bid_status boolean, -- bids with this is_confirmed\n")
        f.write("	p_paid_status boolean) -- bids with this is_paid\n")
        f.write("RETURNS table (\n")
        f.write("	owner_email varchar,\n")
        f.write("	owner_name varchar,\n")
        f.write("	caretaker_email varchar,\n")
        f.write("	caretaker_name varchar,\n")
        f.write("	caretaker_rating DECIMAL(10, 2),\n")
        f.write("	is_fulltime boolean,\n")
        f.write("	species varchar,\n")
        f.write("	start_date date,\n")
        f.write("	end_date date,\n")
        f.write("	amount_bidded DECIMAL(10, 2),\n")
        f.write("	rating DECIMAL(10, 2),\n")
        f.write("	is_confirmed boolean,\n")
        f.write("	is_paid boolean\n")
        f.write(")\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("    return query\n")
        f.write("	select\n")
        f.write("		EBF.owner_email,\n")
        f.write("		EBF.owner_name,\n")
        f.write("		EBF.caretaker_email,\n")
        f.write("		EBF.caretaker_name,\n")
        f.write("		EBF.caretaker_rating,\n")
        f.write("		EBF.is_fulltime,\n")
        f.write("		EBF.species,\n")
        f.write("		EBF.start_date,\n")
        f.write("		EBF.end_date,\n")
        f.write("		EBF.amount_bidded,\n")
        f.write("		EBF.rating,\n")
        f.write("		EBF.is_confirmed,\n")
        f.write("		EBF.is_paid\n")
        f.write("	from (\n")
        f.write("		BidsFor BF NATURAL JOIN (\n")
        f.write("			select U1.email as owner_email, U1.name as owner_name from users U1\n")
        f.write("		) UPO NATURAL JOIN (\n")
        f.write("			select U2.email as caretaker_email, U2.name as caretaker_name from users U2\n")
        f.write("		) UCT NATURAL JOIN (\n")
        f.write("			select C1.email as caretaker_email, C1.is_fulltime, C1.rating as caretaker_rating from Caretakers C1\n")
        f.write("		) CT NATURAL JOIN (\n")
        f.write("			select P1.email as owner_email, P1.pet_name, P1.species from Pets P1\n")
        f.write("		) PETS\n")
        f.write("	) as EBF\n")
        f.write("	where\n")
        f.write("		(EBF.owner_name LIKE ('%' || p_po_name || '%') or p_po_name is null) and\n")
        f.write("		(EBF.caretaker_name LIKE ('%' || p_ct_name || '%') or p_ct_name is null) and\n")
        f.write("		(EBF.is_fulltime = p_is_fulltime or p_is_fulltime is null) and\n")
        f.write("		(EBF.species = p_pet_type or p_pet_type is null) and\n")
        f.write("		(EBF.start_date >= p_start_date or p_start_date is null) and\n")
        f.write("		(EBF.end_date <= p_end_date or p_end_date is null) and\n")
        f.write("        (EBF.amount_bidded >= p_min or p_min is null) and\n")
        f.write("		(EBF.amount_bidded <= p_max or p_max is null) and\n")
        f.write("		(EBF.rating >= p_rating or p_rating is null) and\n")
        f.write("		(EBF.is_confirmed = p_bid_status or p_bid_status is null) and\n")
        f.write("		(EBF.is_paid = p_paid_status or p_paid_status is null);\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("-- function to filter caretakers by a set of criteria\n")
        f.write("-- if a pet type is not specified, the price col will be null\n")
        f.write("-- if a pet type is specified, the price col will contain the price to take care of that pet\n")
        f.write("DROP FUNCTION IF EXISTS filterCaretakers;\n")
        f.write("CREATE OR REPLACE FUNCTION filterCaretakers(\n")
        f.write("	p_ct_name varchar, -- caretakers with this in their name\n")
        f.write("	p_rating DECIMAL(10, 2), -- caretakers with at least this rating\n")
        f.write("	p_is_fulltime boolean, -- caretaker of this type\n")
        f.write("	p_pet_type varchar, -- caretakers that can take care of this pet type, with p_min <= price <= p_max\n")
        f.write("	p_min DECIMAL(10, 2), -- note that if caretaker cannot take care of this pet type, the price does not matter\n")
        f.write("	p_max DECIMAL(10, 2),\n")
        f.write("	p_start_date date, -- caretakers that can work on this interval\n")
        f.write("	p_end_date date\n")
        f.write(") RETURNS table (\n")
        f.write("	email varchar,\n")
        f.write("	name varchar,\n")
        f.write("	rating DECIMAL(10, 2),\n")
        f.write("	is_fulltime boolean,\n")
        f.write("	daily_price DECIMAL(10, 2) -- this is null if no pet type is specified\n")
        f.write(")\n")
        f.write("language plpgsql\n")
        f.write("AS\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	if p_pet_type is null then\n")
        f.write("    	return query\n")
        f.write("		select\n")
        f.write("			ECT.email,\n")
        f.write("			ECT.name,\n")
        f.write("			ECT.rating,\n")
        f.write("			ECT.is_fulltime,\n")
        f.write("			null::numeric as daily_price\n")
        f.write("		from (\n")
        f.write("			Caretakers CT NATURAL JOIN (\n")
        f.write("				select U1.email, U1.name from users U1\n")
        f.write("			) U \n")
        f.write("		) as ECT\n")
        f.write("		where\n")
        f.write("			(ECT.name LIKE ('%' || p_ct_name || '%') or p_ct_name is null) and\n")
        f.write("			(ECT.rating >= p_rating or p_rating is null) and\n")
        f.write("			(ECT.is_fulltime = p_is_fulltime or p_is_fulltime is null) and\n")
        f.write("			(p_start_date is null or p_end_date is null or canWork(ECT.email, p_start_date, p_end_date));\n")
        f.write("	else\n")
        f.write("    	return query\n")
        f.write("		select\n")
        f.write("			ECT.email,\n")
        f.write("			ECT.name,\n")
        f.write("			ECT.rating,\n")
        f.write("			ECT.is_fulltime,\n")
        f.write("			ECT.daily_price\n")
        f.write("		from (\n")
        f.write("			Caretakers CT NATURAL JOIN (\n")
        f.write("				select U1.email, U1.name from users U1\n")
        f.write("			) U NATURAL JOIN (\n")
        f.write("				select * from takecareprice\n")
        f.write("			) TCP\n")
        f.write("		) as ECT\n")
        f.write("		where\n")
        f.write("			(ECT.name LIKE ('%' || p_ct_name || '%') or p_ct_name is null) and\n")
        f.write("			(ECT.rating >= p_rating or p_rating is null) and\n")
        f.write("			(ECT.is_fulltime = p_is_fulltime or p_is_fulltime is null) and\n")
        f.write("			(ECT.species = p_pet_type) and\n")
        f.write("			(ECT.daily_price >= p_min or p_min is null) and\n")
        f.write("			(ECT.daily_price <= p_max or p_max is null) and\n")
        f.write("			(p_start_date is null or p_end_date is null or canWork(ECT.email, p_start_date, p_end_date));\n")
        f.write("	end if;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("--=================================================== END HELPER ============================================================\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("--==================================================== first half of trigger ====================================================\n")
        f.write("\n")
        f.write("-- Trigger: when a bid has its is_confirmed set to True, this trigger will find all clashing bids and set is_confirmed to False\n")
        f.write("-- bid B clashes with bid A if B have same caretaker_email as A and bid B's (start_date, end_date) overlaps with that of A\n")
        f.write("CREATE OR REPLACE FUNCTION invalidate_bids()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	update bidsfor BF set\n")
        f.write("		is_confirmed = false\n")
        f.write("	where\n")
        f.write("		BF.caretaker_email = NEW.caretaker_email and\n")
        f.write("		BF.is_confirmed isnull and\n")
        f.write("		NOT canWork(NEW.caretaker_email, BF.start_date, BF.end_date);\n")
        f.write("	return new;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("drop trigger if exists trigger_invalidate_bids on BidsFor;\n")
        f.write("CREATE TRIGGER trigger_invalidate_bids\n")
        f.write("    AFTER UPDATE OF is_confirmed ON BidsFor\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE invalidate_bids();\n")
        f.write("\n")
        f.write("\n")
        f.write("-- Trigger: when a bidsFor has rating updated, this function will compute the caretakers new rating and update Caretakers table\n")
        f.write("CREATE OR REPLACE FUNCTION update_rating()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("DECLARE\n")
        f.write("	r DECIMAL(10, 2);\n")
        f.write("BEGIN\n")
        f.write("	select AVG(rating) into r from bidsfor\n")
        f.write("	where\n")
        f.write("		caretaker_email = NEW.caretaker_email and\n")
        f.write("		rating is not null;\n")
        f.write("		\n")
        f.write("	update Caretakers CT set\n")
        f.write("		rating = r\n")
        f.write("	where\n")
        f.write("		CT.email = NEW.caretaker_email;\n")
        f.write("		\n")
        f.write("	return new;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_update_rating on BidsFor;\n")
        f.write("CREATE TRIGGER trigger_update_rating\n")
        f.write("    AFTER UPDATE OF rating ON BidsFor\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE update_rating();\n")
        f.write("\n")
        f.write("\n")
        f.write("-- trigger: prevent adding leave when you have a confirmed bid that overlaps with the leave date (Full Time)\n")
        f.write("CREATE OR REPLACE FUNCTION block_taking_leave()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF EXISTS (\n")
        f.write("		select 1 from bidsFor\n")
        f.write("		where\n")
        f.write("			caretaker_email = NEW.email and\n")
        f.write("			((start_date, end_date + interval '1 day') overlaps (NEW.leave_date, NEW.leave_date + interval '1 day'))\n")
        f.write("			and is_confirmed = true\n")
        f.write("	) THEN\n")
        f.write("		RAISE EXCEPTION 'You have a job on this date';\n")
        f.write("	END IF;\n")
        f.write("	RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_block_taking_leave on FullTimeLeave;\n")
        f.write("CREATE TRIGGER trigger_block_taking_leave\n")
        f.write("    BEFORE INSERT ON FullTimeLeave\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE block_taking_leave();\n")
        f.write("\n")
        f.write("-- trigger: full time caretaker accept bid immediately if he can work\n")
        f.write("CREATE OR REPLACE FUNCTION ft_accept_bid() RETURNS TRIGGER\n")
        f.write("    AS $$\n")
        f.write("BEGIN\n")
        f.write("    UPDATE BidsFor BF\n")
        f.write("    SET is_confirmed = true\n")
        f.write("    WHERE \n")
        f.write("        BF.caretaker_email = NEW.caretaker_email AND\n")
        f.write("        BF.owner_email = NEW.owner_email AND\n")
        f.write("        BF.pet_name = NEW.pet_name AND\n")
        f.write("        BF.submission_time = NEW.submission_time AND \n")
        f.write("        canWork(NEW.caretaker_email, NEW.start_date, NEW.end_date) AND\n")
        f.write("        EXISTS (select 1 from Caretakers where email = New.caretaker_email and is_fulltime=true);\n")
        f.write("    RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$ LANGUAGE plpgsql;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS ft_accept_bid ON BidsFor;\n")
        f.write("CREATE TRIGGER ft_accept_bid\n")
        f.write("    AFTER INSERT ON BidsFor\n")
        f.write("	FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE ft_accept_bid();\n")
        f.write("\n")
        f.write("\n")
        f.write("-- trigger to ensure the leave table is valid\n")
        f.write("-- if invalid row is entered into leave table, this trigger will delete that row\n")
        f.write("CREATE OR REPLACE FUNCTION isLeaveValidTrigger()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF NOT (\n")
        f.write("		(\n")
        f.write("		select sum(len / 150) from (\n")
        f.write("			select (lead(leave_date, 1) over (order by leave_date asc)) - leave_date - 1 as len\n")
        f.write("			FROM (\n")
        f.write("				select * from fulltimeleave\n")
        f.write("				where\n")
        f.write("					email = NEW.email and\n")
        f.write("					EXTRACT(YEAR FROM leave_date) = EXTRACT(YEAR FROM NEW.leave_date)::int\n")
        f.write("				UNION\n")
        f.write("				select NEW.email as email, ((EXTRACT(YEAR FROM NEW.leave_date)::int - 1) || '-12-31')::date as leave_date\n")
        f.write("				UNION\n")
        f.write("				select NEW.email as email, ((EXTRACT(YEAR FROM NEW.leave_date)::int + 1) || '-01-01')::date as leave_date\n")
        f.write("			) L1\n")
        f.write("		) L2\n")
        f.write("		) >= 2\n")
        f.write("	) THEN\n")
        f.write("		RAISE 'Invalid leave pattern for % on %', NEW.email, NEW.leave_date;\n")
        f.write("	END IF;\n")
        f.write("	RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("DROP TRIGGER IF EXISTS is_leave_valid_trigger ON FullTimeLeave;\n")
        f.write("CREATE CONSTRAINT TRIGGER is_leave_valid_trigger\n")
        f.write("    AFTER INSERT ON FullTimeLeave\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE isLeaveValidTrigger();\n")
        f.write("\n")
        f.write("\n")
        f.write("-- trigger: prevent deleting avail when you have a confirmed bid that overlaps with the avail date (Part Time)\n")
        f.write("CREATE OR REPLACE FUNCTION block_deleting_avail()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF EXISTS (\n")
        f.write("		select 1 from bidsFor\n")
        f.write("		where\n")
        f.write("			caretaker_email = OLD.email and\n")
        f.write("			((start_date, end_date + interval '1 day') overlaps (OLD.work_date, OLD.work_date + interval '1 day'))\n")
        f.write("	) THEN\n")
        f.write("		RAISE EXCEPTION 'You have a job on this date';\n")
        f.write("	END IF;\n")
        f.write("	RETURN OLD;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_block_deleting_avail on PartTimeAvail;\n")
        f.write("CREATE TRIGGER trigger_block_deleting_avail\n")
        f.write("    BEFORE DELETE ON PartTimeAvail\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE block_deleting_avail();\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- trigger to ensure that only partTime Caretakers are inserted into the PartTimeAvail table\n")
        f.write("CREATE OR REPLACE FUNCTION partTimeEntryIsPartTime()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	if isFullTime(NEW.email) THEN\n")
        f.write("		RAISE EXCEPTION 'Cannot insert because % is not a part time caretaker', NEW.email;\n")
        f.write("		return null;\n")
        f.write("	end if;\n")
        f.write("	return new;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_check_part_time_entry on PartTimeAvail;\n")
        f.write("CREATE TRIGGER trigger_check_part_time_entry\n")
        f.write("    BEFORE INSERT ON PartTimeAvail\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE partTimeEntryIsPartTime();\n")
        f.write("	\n")
        f.write("-- trigger to ensure that only fullTime Caretakers are inserted into the FullTimeLeave table\n")
        f.write("CREATE OR REPLACE FUNCTION fullTimeEntryIsFullTime()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	if not isFullTime(NEW.email) THEN\n")
        f.write("		RAISE EXCEPTION 'Cannot insert because % is not a full time caretaker', NEW.email;\n")
        f.write("		return null;\n")
        f.write("	end if;\n")
        f.write("	return new;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_check_full_time_entry on FullTimeLeave;\n")
        f.write("CREATE TRIGGER trigger_check_full_time_entry\n")
        f.write("    BEFORE INSERT ON FullTimeLeave\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE fullTimeEntryIsFullTime();\n")
        f.write("\n")
        f.write("-- trigger to update a caretakers daily price when his rating changes\n")
        f.write("CREATE OR REPLACE FUNCTION updatePriceOnRatingChange()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	-- update the daily_price of this caretaker for all the pet types\n")
        f.write("    -- but only if this caretaker is a fulltime caretaker\n")
        f.write("    IF isFullTime(NEW.email) THEN\n")
        f.write("	    UPDATE TakecarePrice TP SET\n")
        f.write("		    daily_price = getDailyPrice(NEW.email, species)\n")
        f.write("	    WHERE\n")
        f.write("		    TP.email = NEW.email;\n")
        f.write("    END IF;\n")
        f.write("\n")
        f.write("	RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("DROP TRIGGER IF EXISTS trigger_update_price_on_rating_change on Caretakers;\n")
        f.write("CREATE TRIGGER trigger_update_price_on_rating_change\n")
        f.write("    AFTER UPDATE OF rating ON Caretakers\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE updatePriceOnRatingChange();\n")
        f.write("\n")
        f.write("\n")
        f.write("-- trigger to update all full time caretakers daily price for a particular pet\n")
        f.write("-- when the base_price of that pet is changed\n")
        f.write("CREATE OR REPLACE FUNCTION updatePriceOnBasePriceChange()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	-- update the daily_price of all caretaker that take care of NEW.species\n")
        f.write("	UPDATE Takecareprice TP SET\n")
        f.write("		daily_price = getDailyPrice(email, NEW.species)\n")
        f.write("	WHERE\n")
        f.write("		TP.species = NEW.species and\n")
        f.write("        isFullTime(TP.email);\n")
        f.write("		\n")
        f.write("	RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("DROP TRIGGER IF EXISTS trigger_update_price_on_base_price_change on PetTypes;\n")
        f.write("CREATE TRIGGER trigger_update_price_on_base_price_change\n")
        f.write("    AFTER UPDATE OF base_price ON PetTypes\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE updatePriceOnBasePriceChange();\n")
        f.write("\n")
        f.write("--==================================================== end first half of trigger ====================================================\n")
        # f.write("\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Dog', 50);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Cat', 60);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Hamster', 70);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Mouse', 80);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Bird', 90);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Horse', 100);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Turtle', 110);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Snake', 120);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Monkey', 130);\n")
        # f.write("INSERT INTO PetTypes(species, base_price) VALUES ('Lion', 140);\n")
        # f.write("\n")
        f.write("--==================================================== GENERATED DATA HERE ====================================================\n")

def secondHalf(filename, mode):
    with open(filename, mode) as f:
        f.write("--==================================================== END GENERATED DATA HERE ====================================================\n")
        f.write("\n")
        f.write("-- ================================================ second half of triggers ================================================\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("--users covering constraint\n")
        f.write("CREATE OR REPLACE FUNCTION check_user_covering() RETURNS TRIGGER\n")
        f.write("    AS $$\n")
        f.write("DECLARE \n")
        f.write("    uncovered_user VARCHAR(30);\n")
        f.write("BEGIN \n")
        f.write("    SELECT email INTO uncovered_user\n")
        f.write("    FROM Users u\n")
        f.write("    WHERE NOT EXISTS (\n")
        f.write("        SELECT 1\n")
        f.write("        FROM PetOwners p\n")
        f.write("        WHERE p.email = u.email\n")
        f.write("    )\n")
        f.write("    AND\n")
        f.write("    NOT EXISTS (\n")
        f.write("        SELECT 1\n")
        f.write("        FROM CareTakers c\n")
        f.write("        WHERE c.email = u.email\n")
        f.write("    )\n")
        f.write("    AND \n")
        f.write("    NOT EXISTS (\n")
        f.write("        SELECT 1\n")
        f.write("        FROM PcsAdmins pcs\n")
        f.write("        WHERE pcs.email = u.email\n")
        f.write("    );\n")
        f.write("    \n")
        f.write("    IF uncovered_user IS NOT NULL THEN \n")
        f.write("        RAISE exception 'user % must belong to one user type', uncovered_user;\n")
        f.write("    END IF;\n")
        f.write("    RETURN NULL;\n")
        f.write("\n")
        f.write("END;\n")
        f.write("$$ LANGUAGE plpgsql;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS user_cover_trigger ON Users;\n")
        f.write("CREATE CONSTRAINT TRIGGER user_cover_trigger\n")
        f.write("    AFTER INSERT ON Users\n")
        f.write("    DEFERRABLE INITIALLY DEFERRED\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE check_user_covering();\n")
        f.write("\n")
        f.write("-- admin + petowner overlap constraint\n")
        f.write("CREATE OR REPLACE FUNCTION check_admin_petowner_overlap() RETURNS TRIGGER\n")
        f.write("    AS $$\n")
        f.write("DECLARE \n")
        f.write("    overlap_user VARCHAR(30);\n")
        f.write("BEGIN\n")
        f.write("    SELECT pcs.email into overlap_user\n")
        f.write("    FROM PcsAdmins pcs, PetOwners p\n")
        f.write("    WHERE pcs.email = p.email;\n")
        f.write("\n")
        f.write("    IF overlap_user IS NOT NULL THEN\n")
        f.write("        RAISE exception '% should not be both PCS Admin and Pet Owner', overlap_user;\n")
        f.write("    END IF;\n")
        f.write("    RETURN NULL;\n")
        f.write("END\n")
        f.write("$$ LANGUAGE plpgsql;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS petowner_overlap_trigger ON PetOwners;\n")
        f.write("CREATE TRIGGER petowner_overlap_trigger\n")
        f.write("    AFTER INSERT ON PetOwners\n")
        f.write("    EXECUTE PROCEDURE check_admin_petowner_overlap();\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS pcs_petowner_overlap_trigger ON PcsAdmins;\n")
        f.write("CREATE TRIGGER pcs_petowner_overlap_trigger\n")
        f.write("    AFTER INSERT ON PcsAdmins\n")
        f.write("    EXECUTE PROCEDURE check_admin_petowner_overlap();\n")
        f.write("\n")
        f.write("-- admin + caretaker overlap constraint\n")
        f.write("CREATE OR REPLACE FUNCTION check_admin_caretaker_overlap() RETURNS TRIGGER\n")
        f.write("    AS $$\n")
        f.write("DECLARE \n")
        f.write("    overlap_user VARCHAR(30);\n")
        f.write("BEGIN\n")
        f.write("    SELECT pcs.email into overlap_user\n")
        f.write("    FROM PcsAdmins pcs, CareTakers c\n")
        f.write("    WHERE pcs.email = c.email;\n")
        f.write("\n")
        f.write("    IF overlap_user IS NOT NULL THEN\n")
        f.write("        RAISE exception '% should not be both PCS Admin and CareTaker', overlap_user;\n")
        f.write("    END IF;\n")
        f.write("    RETURN NULL;\n")
        f.write("END\n")
        f.write("$$ LANGUAGE plpgsql;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS caretaker_overlap_trigger ON CareTakers;\n")
        f.write("CREATE TRIGGER caretaker_overlap_trigger\n")
        f.write("    AFTER INSERT ON CareTakers\n")
        f.write("    EXECUTE PROCEDURE check_admin_caretaker_overlap();\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS pcs_caretaker_overlap_trigger ON PcsAdmins;\n")
        f.write("CREATE TRIGGER pcs_caretaker_overlap_trigger\n")
        f.write("    AFTER INSERT ON PcsAdmins\n")
        f.write("    EXECUTE PROCEDURE check_admin_caretaker_overlap();\n")
        f.write("\n")
        f.write("-- trigger: prevent adding bid when you have no avail date (Part Time)\n")
        f.write("CREATE OR REPLACE FUNCTION block_inserting_bid_part_time()\n")
        f.write("RETURNS trigger\n")
        f.write("language plpgsql\n")
        f.write("as\n")
        f.write("$$\n")
        f.write("BEGIN\n")
        f.write("	IF EXISTS (\n")
        f.write("        select 1 from CareTakers\n")
        f.write("        where \n")
        f.write("            email = NEW.caretaker_email and is_fulltime = false\n")
        f.write("    ) \n")
        f.write("    AND\n")
        f.write("    EXISTS (\n")
        f.write("		select generate_series(NEW.start_date, NEW.end_date, '1 day'::interval)::date as work_date\n")
        f.write("		EXCEPT\n")
        f.write("		select work_date from PartTimeAvail where email = NEW.caretaker_email\n")
        f.write("	) THEN\n")
        f.write("		RAISE EXCEPTION 'Part time worker does not have availability on this date';\n")
        f.write("	END IF;\n")
        f.write("	RETURN NEW;\n")
        f.write("END;\n")
        f.write("$$;\n")
        f.write("\n")
        f.write("DROP TRIGGER IF EXISTS trigger_block_inserting_bid_part_time on BidsFor;\n")
        f.write("CREATE TRIGGER trigger_block_inserting_bid_part_time\n")
        f.write("    BEFORE INSERT ON BidsFor\n")
        f.write("    FOR EACH ROW\n")
        f.write("    EXECUTE PROCEDURE block_inserting_bid_part_time();\n")
        f.write("\n")
        f.write("-- ============================================= end second half of triggers ========================================\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- ============================================ HANDCRAFTED DATA ============================================\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- contains the manually added sql data\n")
        f.write("-- used to put in very specific things\n")
        f.write("-- to be fully independent from sql_init, need to initialize petowners and caretakers yourself\n")
        f.write("-- can assume that PetTypes table is initialized\n")
        f.write("-- also, avoid using names that have been used in sql_init\n")
        f.write("-- record the names (of Users) used here, so I can exclude from the sql_init data generation:\n")
        f.write("-- apple, pearl, carmen, butch, billy, ricky, roger, rocky, panter, peter, patty, patrick, patricia, nala, bob, buddy, brutus\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- sql for Petowner with a lot of bids\n")
        f.write("-- Alan the swanky owner of three pets\n")
        f.write("-- digger the dog\n")
        f.write("-- biscuit the bird\n")
        f.write("-- cookie the cat\n")
        f.write("-- He always ask :\n")
        f.write("    -- ricky to take care his dog\n")
        f.write("    -- roger take care his cat\n")
        f.write("    -- rocky take care his bird\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('alan', 'alan@gmail.com', 'alan is a User of PCS', 'alanpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('alan@gmail.com');\n")
        f.write("\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('alan@gmail.com', 'digger', 'digger needs love!', 'digger is a Dog', 'Dog');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('alan@gmail.com', 'cookie', 'cookie needs love!', 'cookie is a Cat', 'Cat');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('alan@gmail.com', 'biscuit', 'biscuit needs love!', 'biscuit is a Bird', 'Bird');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('ricky', 'ricky@gmail.com', 'ricky is a User of PCS', 'rickypw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('ricky@gmail.com', True, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (50, 'ricky@gmail.com', 'Dog');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('roger', 'roger@gmail.com', 'roger is a User of PCS', 'rogerpw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('roger@gmail.com', True, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (60, 'roger@gmail.com', 'Cat');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('rocky', 'rocky@gmail.com', 'rocky is a User of PCS', 'rockypw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('rocky@gmail.com', True, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (90, 'rocky@gmail.com', 'Bird');\n")
        f.write("\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'ricky@gmail.com', 'digger',\n")
        f.write("'2020-10-01 00:00:01', '2020-10-25', '2020-10-28',\n")
        f.write("50, 50,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-10-01 00:00:02', '2020-10-27', '2020-10-30',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 3\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'ricky@gmail.com', 'digger',\n")
        f.write("'2020-10-15 00:00:01', '2020-11-01', '2020-11-03',\n")
        f.write("50, 50,\n")
        f.write("True, True, '1', '1', 4\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-10-15 00:00:02', '2020-11-03', '2020-11-06',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 4\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'ricky@gmail.com', 'digger',\n")
        f.write("'2020-11-13 00:00:01', '2020-12-01', '2020-12-05',\n")
        f.write("50, 50,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-11-13 00:00:02', '2020-12-01', '2020-12-05',\n")
        f.write("60, 60,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'rocky@gmail.com', 'biscuit',\n")
        f.write("'2020-11-13 00:00:03', '2020-12-01', '2020-12-05',\n")
        f.write("90, 90,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'ricky@gmail.com', 'digger',\n")
        f.write("'2020-11-13 00:00:11', '2020-12-10', '2020-12-14',\n")
        f.write("50, 50,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-11-13 00:00:12', '2020-12-15', '2020-12-19',\n")
        f.write("60, 60,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'rocky@gmail.com', 'biscuit',\n")
        f.write("'2020-11-13 00:00:13', '2020-12-17', '2020-12-21',\n")
        f.write("90, 90,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'rocky@gmail.com', 'biscuit',\n")
        f.write("'2020-11-13 00:00:14', '2020-12-25', '2020-12-31',\n")
        f.write("90, 90,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'ricky@gmail.com', 'digger',\n")
        f.write("'2020-11-13 00:00:04', '2021-01-01', '2021-01-05',\n")
        f.write("50, 50,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-11-13 00:00:05', '2021-01-01', '2021-01-05',\n")
        f.write("60, 60,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'rocky@gmail.com', 'biscuit',\n")
        f.write("'2020-11-13 00:00:06', '2021-01-01', '2021-01-05',\n")
        f.write("90, 90,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- recommended caretakers for alan, owner of 3 pets\n")
        f.write("-- nala, similar pet owner to alan. owns:\n")
        f.write("    -- doobs the dog\n")
        f.write("    -- cauchy the cat\n")
        f.write("    -- barbie the bird\n")
        f.write("-- 3 common caretakers: ricky, roger, rocky\n")
        f.write("-- recommended cts: bob, buddy, brutus\n")
        f.write("\n")
        f.write("-- make nala\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('nala', 'nala@gmail.com', 'nala is a User of PCS', 'nalapw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('nala@gmail.com');\n")
        f.write("\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('nala@gmail.com', 'doobs', 'doobs needs love!', 'doobs is a Dog', 'Dog');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('nala@gmail.com', 'cauchy', 'cauchy needs love!', 'cauchy is a Cat', 'Cat');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('nala@gmail.com', 'barbie', 'barbie needs love!', 'barbie is a Bird', 'Bird');\n")
        f.write("\n")
        f.write("-- boost rating with roger (cat ct) for alan\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-09-01 00:00:02', '2020-09-02', '2020-09-03',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'roger@gmail.com', 'cookie',\n")
        f.write("'2020-09-02 00:00:02', '2020-09-05', '2020-09-06',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("-- boost rating with rocky (bird ct) for alan\n")
        f.write("INSERT INTO BidsFor VALUES ('alan@gmail.com', 'rocky@gmail.com', 'biscuit',\n")
        f.write("'2020-09-13 00:00:03', '2020-09-14', '2020-09-15',\n")
        f.write("90, 90,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("--make nala similar to alan\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'ricky@gmail.com', 'doobs',\n")
        f.write("'2020-08-01 00:00:01', '2020-08-25', '2020-08-28',\n")
        f.write("50, 50,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'roger@gmail.com', 'cauchy',\n")
        f.write("'2020-08-15 00:00:02', '2020-08-20', '2020-08-22',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'rocky@gmail.com', 'barbie',\n")
        f.write("'2020-08-13 00:00:03', '2020-08-23', '2020-08-24',\n")
        f.write("90, 90,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("--make recommended cts: \n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('bob', 'bob@gmail.com', 'bob is a User of PCS', 'bobpw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('bob@gmail.com', True, 0);--??rating should be 0 or NULL?\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (50, 'bob@gmail.com', 'Dog');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('buddy', 'buddy@gmail.com', 'buddy is a User of PCS', 'buddypw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('buddy@gmail.com', True, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (60, 'buddy@gmail.com', 'Cat');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('brutus', 'brutus@gmail.com', 'brutus is a User of PCS', 'brutuspw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('brutus@gmail.com', True, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (90, 'brutus@gmail.com', 'Bird');\n")
        f.write("-- nala hire the 3 recommended cts before\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'bob@gmail.com', 'doobs',\n")
        f.write("'2020-07-01 00:00:01', '2020-07-25', '2020-07-28',\n")
        f.write("50, 50,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'buddy@gmail.com', 'cauchy',\n")
        f.write("'2020-08-15 00:00:02', '2020-08-20', '2020-08-22',\n")
        f.write("60, 60,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('nala@gmail.com', 'brutus@gmail.com', 'barbie',\n")
        f.write("'2020-08-13 00:00:03', '2020-08-23', '2020-08-24',\n")
        f.write("90, 90,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("\n")
        f.write("\n")
        f.write("-- parttime caretaker with a lot of jobs \n")
        f.write("-- Cain can take care of\n")
        f.write("-- Dog 100\n")
        f.write("-- Cat 100\n")
        f.write("-- Hamster 80\n")
        f.write("-- Mouse 80\n")
        f.write("-- Bird 90\n")
        f.write("\n")
        f.write("-- He gets jobs from Petowners\n")
        f.write("-- Apple Dog digger\n")
        f.write("-- Pearl Dog digger, Cat cookie\n")
        f.write("-- Carmen Hamster harry, Mouse mickey\n")
        f.write("-- Butch Bird biscuit\n")
        f.write("-- Billy Bird biscuit\n")
        f.write("-- give him avail on months 10, 11, 12 of 2020\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('cain', 'cain@gmail.com', 'cain is a User of PCS', 'cainpw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('cain@gmail.com', False, 0);\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (100, 'cain@gmail.com', 'Dog');\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (100, 'cain@gmail.com', 'Cat');\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (80, 'cain@gmail.com', 'Hamster');\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (80, 'cain@gmail.com', 'Mouse');\n")
        f.write("INSERT INTO TakecarePrice(daily_price, email, species) VALUES (90, 'cain@gmail.com', 'Bird');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-01');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-02');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-03');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-04');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-05');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-06');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-07');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-08');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-09');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-10');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-11');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-12');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-13');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-14');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-15');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-16');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-17');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-18');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-19');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-20');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-21');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-22');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-23');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-24');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-25');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-26');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-27');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-28');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-29');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-30');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-10-31');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-01');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-02');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-03');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-04');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-05');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-06');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-07');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-08');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-09');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-10');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-11');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-12');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-13');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-14');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-15');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-16');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-17');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-18');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-19');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-20');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-21');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-22');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-23');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-24');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-25');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-26');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-27');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-28');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-29');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-11-30');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-01');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-02');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-03');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-04');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-05');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-06');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-07');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-08');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-09');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-10');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-11');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-12');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-13');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-14');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-15');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-16');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-17');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-18');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-19');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-20');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-21');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-22');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-23');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-24');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-25');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-26');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-27');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-28');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-29');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-30');\n")
        f.write("INSERT INTO PartTimeAvail(email, work_date) VALUES ('cain@gmail.com', '2020-12-31');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('apple', 'apple@gmail.com', 'apple is a User of PCS', 'applepw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('apple@gmail.com');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('apple@gmail.com', 'digger', 'digger needs love!', 'digger is a Dog', 'Dog');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('pearl', 'pearl@gmail.com', 'pearl is a User of PCS', 'pearlpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('pearl@gmail.com');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('pearl@gmail.com', 'digger', 'digger needs love!', 'digger is a Dog', 'Dog');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('pearl@gmail.com', 'cookie', 'cookie needs love!', 'cookie is a Cat', 'Cat');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('carmen', 'carmen@gmail.com', 'carmen is a User of PCS', 'carmenpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('carmen@gmail.com');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('carmen@gmail.com', 'harry', 'harry needs love!', 'harry is a Hamster', 'Hamster');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('carmen@gmail.com', 'mickey', 'mickey needs love!', 'mickey is a Mouse', 'Mouse');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('butch', 'butch@gmail.com', 'butch is a User of PCS', 'butchpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('butch@gmail.com');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('butch@gmail.com', 'biscuit', 'biscuit needs love!', 'biscuit is a Bird', 'Bird');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('billy', 'billy@gmail.com', 'billy is a User of PCS', 'billypw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('billy@gmail.com');\n")
        f.write("INSERT INTO Pets(email, pet_name, special_requirements, description, species) VALUES ('billy@gmail.com', 'biscuit', 'biscuit needs love!', 'biscuit is a Bird', 'Bird');\n")
        f.write("\n")
        f.write("INSERT INTO BidsFor VALUES ('apple@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-09-01 00:00:01', '2020-10-01', '2020-10-07',\n")
        f.write("100, 110,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('pearl@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-09-01 00:00:02', '2020-10-02', '2020-10-08',\n")
        f.write("100, 100,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('pearl@gmail.com', 'cain@gmail.com', 'cookie',\n")
        f.write("'2020-09-01 00:00:03', '2020-10-03', '2020-10-09',\n")
        f.write("100, 100,\n")
        f.write("False, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('carmen@gmail.com', 'cain@gmail.com', 'harry',\n")
        f.write("'2020-09-01 00:00:04', '2020-10-05', '2020-10-10',\n")
        f.write("80, 80,\n")
        f.write("False, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("INSERT INTO BidsFor VALUES ('butch@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-10-15 00:00:01', '2020-10-16', '2020-10-20',\n")
        f.write("90, 100,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('billy@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-10-15 00:00:02', '2020-10-17', '2020-10-21',\n")
        f.write("90, 90,\n")
        f.write("True, True, '1', '1', 4\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('carmen@gmail.com', 'cain@gmail.com', 'mickey',\n")
        f.write("'2020-10-15 00:00:03', '2020-10-21', '2020-10-25',\n")
        f.write("80, 100,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("\n")
        f.write("-- cain has high rating now, so can take 5 pets\n")
        f.write("INSERT INTO BidsFor VALUES ('apple@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-10-31 00:00:01', '2020-11-01', '2020-11-05',\n")
        f.write("100, 120,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('pearl@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-10-31 00:00:02', '2020-11-01', '2020-11-05',\n")
        f.write("100, 110,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('pearl@gmail.com', 'cain@gmail.com', 'cookie',\n")
        f.write("'2020-10-31 00:00:03', '2020-11-01', '2020-11-05',\n")
        f.write("100, 100,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('carmen@gmail.com', 'cain@gmail.com', 'harry',\n")
        f.write("'2020-10-31 00:00:04', '2020-11-01', '2020-11-05',\n")
        f.write("80, 80,\n")
        f.write("False, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('carmen@gmail.com', 'cain@gmail.com', 'mickey',\n")
        f.write("'2020-10-31 00:00:05', '2020-11-01', '2020-11-05',\n")
        f.write("80, 81,\n")
        f.write("False, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('butch@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-10-31 00:00:06', '2020-11-01', '2020-11-03',\n")
        f.write("90, 105,\n")
        f.write("True, True, '1', '1', 5\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('billy@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-10-31 00:00:07', '2020-11-01', '2020-11-03',\n")
        f.write("90, 100,\n")
        f.write("True, True, '1', '1', 4\n")
        f.write(");\n")
        f.write("\n")
        f.write("-- future bids\n")
        f.write("INSERT INTO BidsFor VALUES ('apple@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-11-03 00:00:01', '2020-12-01', '2020-12-05',\n")
        f.write("100, 100,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('pearl@gmail.com', 'cain@gmail.com', 'digger',\n")
        f.write("'2020-11-03 00:00:02', '2020-12-01', '2020-12-05',\n")
        f.write("100, 110,\n")
        f.write("True, True, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('butch@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-11-03 00:00:03', '2020-12-01', '2020-12-03',\n")
        f.write("90, 100,\n")
        f.write("True, False, '1', '1', NULL\n")
        f.write(");\n")
        f.write("INSERT INTO BidsFor VALUES ('billy@gmail.com', 'cain@gmail.com', 'biscuit',\n")
        f.write("'2020-11-03 00:00:03', '2020-12-01', '2020-12-07',\n")
        f.write("90, 95,\n")
        f.write("True, True, '1', '1', NULL\n")
        f.write(");\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("\n")
        f.write("-- Forum\n")
        f.write("-- panter, peter, patty, patrick, patricia are discussing stuff\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('panter', 'panter@gmail.com', 'panter is a User of PCS', 'panterpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('panter@gmail.com');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('peter', 'peter@gmail.com', 'peter is a User of PCS', 'peterpw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('peter@gmail.com', True, 0);\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('patty', 'patty@gmail.com', 'patty is a User of PCS', 'pattypw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('patty@gmail.com', False, 0);\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('patrick', 'patrick@gmail.com', 'patrick is a User of PCS', 'patrickpw');\n")
        f.write("INSERT INTO Petowners(email) VALUES ('patrick@gmail.com');\n")
        f.write("\n")
        f.write("INSERT INTO Users(name, email, description, password) VALUES ('patricia', 'patricia@gmail.com', 'patricia is a User of PCS', 'patriciapw');\n")
        f.write("INSERT INTO Caretakers(email, is_fulltime, rating) VALUES ('patricia@gmail.com', True, 0);\n")
        f.write("\n")
        f.write("INSERT INTO Posts(post_id, email, title, cont) VALUES (1, 'panter@gmail.com', 'How to teach dog to sit',\n")
        f.write("'Im trying to teach my dog roger how to sit but he just doesnt get it, any tips?');\n")
        f.write("\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'peter@gmail.com', '2020-09-26',\n")
        f.write("    'you need to do progressive training, like in NS'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'patty@gmail.com', '2020-09-26',\n")
        f.write("    'i think you shouldnt own pets if you dont even know this basic stuff'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'patrick@gmail.com', '2020-09-26',\n")
        f.write("    'dickson dont be mean to people everyoen has to start somewhere'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'patricia@gmail.com', '2020-09-27',\n")
        f.write("    'have you tried giving him treats every time your dog does it correctly?'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'peter@gmail.com', '2020-09-27',\n")
        f.write("    'have you tried beating him with a slipper???'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'panter@gmail.com', '2020-09-27',\n")
        f.write("    'noo...i would never hurt my precious dog'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'patty@gmail.com', '2020-09-27',\n")
        f.write("    'you need to be dominant so your dog knows you are pack leader'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    1, 'patrick@gmail.com', '2020-09-27',\n")
        f.write("    'eh pm me i am expert because i watch youtube'\n")
        f.write(");\n")
        f.write("\n")
        f.write("INSERT INTO Posts(post_id, email, title, cont) VALUES (2, 'patty@gmail.com', 'How to make cat like me',\n")
        f.write("'why does my cat hate me so much??');\n")
        f.write("\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    2, 'peter@gmail.com', '2020-09-26',\n")
        f.write("    'either it likes you or it doesnt, you can only accept the outcome'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    2, 'patricia@gmail.com', '2020-09-26',\n")
        f.write("    'I think you need to give her some space'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    2, 'panter@gmail.com', '2020-09-26',\n")
        f.write("    'hey i have the same problem too'\n")
        f.write(");\n")
        f.write("INSERT INTO Comments(post_id, email, date_time, cont) VALUES (\n")
        f.write("    2, 'peter@gmail.com', '2020-09-27',\n")
        f.write("    'Does this work for dogs also?'\n")
        f.write(");\n")


firstHalf('writertest.sql', 'a+')
secondHalf('writertest.sql', 'a+')